(module IMPLICIT-REFS
(lib "eopl.ss" "eopl")
(require racket/vector)
(require "../cha1.rkt")
(provide run value-of-program value-of)
;;;;;;;;;;;;;lang;;;;;;;;;;;;;;;;;;;;;;
  (define the-lexical-spec
    '((whitespace (whitespace) skip)
      (comment ("%" (arbno (not #\newline))) skip)
      (identifier
       (letter (arbno (or letter digit "_" "-" "?")))
       symbol)
      (number (digit (arbno digit)) number)
      (number ("-" digit (arbno digit)) number)
      ))
  
  (define the-grammar
    '((program (expression) num-program)
      (program (Bool-exp) bool-program)
      
      (Bool-exp
       ("zero?" "(" expression ")")
       zero?-exp)
      
      (Bool-exp
       ("equal?" "(" expression "," expression ")")
       equal?-exp)

      (Bool-exp
       ("greater?" "(" expression "," expression ")")
       greater?-exp)

      (Bool-exp
       ("less?" "(" expression "," expression ")")
       less?-exp)
      
      (expression (number) const-exp)
      (expression
        ("-" "(" expression "," expression ")")
        diff-exp)
      
      (expression
       ("if" Bool-exp "then" expression "else" expression)
       if-exp)

      (expression (identifier) var-exp)

      (expression
       ("let" (arbno identifier "=" expression) "in" expression)
       let-exp)

      (expression
       ("let*" (arbno identifier "=" expression) "in" expression)
       let*-exp)

      (expression
       ("minus" "(" expression ")")
       minus-exp)

      (expression
       ("+" "(" (separated-list expression ",") ")")
       add-exp)

      (expression
       ("*" "(" (separated-list expression ",") ")")
       mul-exp)

      (expression
       ("[" number "]" "(" expression ")")
       intq-exp)

      (expression
       ("emptylist")
       emptylist-exp)

      (expression
       ("cons" "(" expression "," expression ")")
       cons-exp)

      (expression
       ("car" "(" expression ")")
       car-exp)

      (expression
       ("cdr" "(" expression ")")
       cdr-exp)

      (expression
       ("null?" "(" expression ")")
       null?-exp)

      (expression
       ("list" "(" (separated-list expression ",") ")")
       list-exp)
      
      (expression
       ("cond" (arbno Bool-exp "==>" expression) "end")
       cond-exp)
    
      (expression
       ("unpack" (arbno identifier) "=" expression "in" expression)
       unpack-exp)

      (expression
       ("proc" "(" (arbno identifier) ")" expression)
       proc-exp)

      (expression
       ("(" expression (arbno expression) ")")
       call-exp)

      (expression
       ("letrec" (arbno identifier "(" (arbno identifier) ")" "=" expression) "in" expression)
      letrec-exp)

      (expression
       ("newref" "(" expression ")")
       newref-exp)

      (expression
       ("deref" "(" expression ")")
       deref-exp)

      (expression
       ("setref" "(" expression "," expression ")")
       setref-exp)

      (expression
       ("begin" expression (arbno ";" expression) "end")
       begin-exp)
      ))
  
  ;;;;;;;;;;;;;;;; sllgen boilerplate ;;;;;;;;;;;;;;;;
  (sllgen:make-define-datatypes the-lexical-spec the-grammar)
  (define show-the-datatypes
    (lambda () (sllgen:list-define-datatypes the-lexical-spec the-grammar)))
  
  (define scan&parse
    (sllgen:make-string-parser the-lexical-spec the-grammar))
  
  (define just-scan
    (sllgen:make-string-scanner the-lexical-spec the-grammar))
;;;;;;;;;;;;;;;;;;;;;;;;;; store implementation ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;helper func;;;;;;;;;;;;
(define exact-integer?
  (lambda (v)
    (and (integer? v) (exact? v))))
(define exact-nonnegative-integer?
  (lambda (v)
    (and (exact-integer? v) (not (negative? v)))))
;;store? : v -> Bool
(define store?
  (lambda (v)
    (vector? v)))
;;empty-store : () -> Sto
(define empty-store
  (lambda ()
    (make-vector 0)))
;;store: A Scheme variable containing the current state of the store. Initially set to a dummy value.
(define the-store 'uninitialized)
;;get-store : () -> Sto
(define get-store
  (lambda ()
    the-store))
;;initialize-store! : () -> Unspecified
(define initialize-store!
  (lambda ()
    (set! the-store (empty-store))))
;;reference? : SchemeVal -> Bool
(define reference?
  (lambda (v)
    (exact-nonnegative-integer? v)))
;;newref : ExpVal -> Ref
(define newref
  (lambda (val)
    (let ((next-ref (vector-length the-store)))
      (set! the-store (vector-append the-store (make-vector 1 val)))
      next-ref)))
;;deref : Ref -> Expval
(define deref
  (lambda (ref)
    (vector-ref the-store ref)))
;;setref! : Ref × ExpVal -> Unspecified
(define setref!
  (lambda (ref val)
    (vector-set! the-store ref val)))
;;;;;;;;;;;;;;;;;;;;;;;;;; environment implementation ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;helper func;;;;;;;;;;;;;
(define member?
  (lambda (s lst)
    (cond
      ((null? lst) #f)
      (else
       (cond
         ((eq? s (car lst)) #t)
         (else (member s (cdr lst))))))))
(define identifier?
  (lambda (s)
   (and (symbol? s) (not (eq? s 'lambda)))))
(define report-no-binding-found
  (lambda (search-var)
    (eopl:error 'apply-env "No binding for ~s" search-var)))
(define report-invalid-env
  (lambda (env)
    (eopl:error 'apply-env "Bad environment: ~s" env)))
;;;;;;;;;;;;;;;environment(procedural representation);;;;;;;;;;;;;;;
(define empty-env
  (lambda ()
    (lambda (search-var)
      (report-no-binding-found search-var))))
(define extend-env
  (lambda (saved-vars saved-vals saved-env)
    (lambda (search-var)
      (let ((i (index search-var saved-vars)))
          (if (not (zero? i))
            (if (vector? saved-vals)
              (pick i (vector-ref saved-vals 0))
              (pick i saved-vals))           
            (apply-env saved-env search-var))))))
(define list-proc
  (lambda (lob-vars lop-body env)
    (cond
      ((and (null? lob-vars) (null? lop-body)) '())
      (else
       (cons (proc-val (procedure (car lob-vars) (car lop-body) env)) (list-proc (cdr lob-vars) (cdr lop-body) env))))))
(define extend-env-rec
  (lambda (lop-name lob-vars lop-body saved-env)
    (let ((vec (make-vector 1)))
      (let ((new-env (extend-env lop-name vec saved-env)))
        (vector-set! vec 0
          (list-proc lob-vars lop-body new-env))
        new-env))))
(define apply-env
  (lambda (env search-var)
    (env search-var)))
;;;;;;;;;;;;;;environment(abstract-syntax representation);;;;;;;;;;;;;;;;;;;;
;;(define-datatype environment environment?
;;  (empty-env)
;;  (extend-env
;;    (vars (list-of identifier?))
;;    (vals (list-of expval?))
;;    (env environment?))
;;  (extend-env-rec
;;    (lop-name (list-of identifier?))
;;    (lob-vars (list-of (list-of identifier?)))
;;    (lobody (list-of expression?))
;;    (env environment?)))
;;(define apply-env
;;  (lambda (env search-var)
;;    (cases environment env
;;      (empty-env ()
;;        (report-no-binding-found search-var))
;;      (extend-env (saved-vars saved-vals saved-env)
;;        (let ((i (index search-var saved-vars)))
;;          (if (not (zero? i))
;;            (pick i saved-vals)
;;            (apply-env saved-env search-var))))
;;      (extend-env-rec (lop-name lob-vars lop-body saved-env)
;;        (let ((i (index search-var lop-name)))
;;          (if (not (zero? i))
;;            (proc-val (procedure (pick i lob-vars) (pick i lop-body) env))
;;            (apply-env saved-env search-var)))))))
;;;;;;;;;;;;;;;;;;;;;;environment(data structure representation);;;;;;;;;;;;;;;;;;;;;;;;;;;
;;(define environment?
;;  (lambda (env)
;;    ((list-of list?) env)))
;;(define empty-env
;;  (lambda ()
;;    '()))
;;(define extend-env
;;  (lambda (vars vals env)
;;    (cond
;;      ((and (atom? vars) (atom? vals)) (list (list (cons vars '()) (cons vals '())) env))
;;      (else (list (list vars vals) env)))))
;;(define apply-env
;;  (lambda (env ;;search-var)
;;    (cond
;;      ((null? env)
;;       (report-no-binding-found search-var))
;;      (else
;;       (let ((saved-vars (caar env))
;;             (saved-vals (cadar env))
;;             (saved-env (cadr env)))
;;           (let ((i (index search-var saved-vars)))
;;             (if (not (eq? i 0))
;;               (pick i saved-vals)
;;               (apply-env saved-env search-var))))))))
;;(define empty-env?
;;  (lambda (env)
;;    (null? env)))
;;(define has-binding*?
;;  (lambda (env s)
;;    (cond
;;      ((null? env) #f)
;;      (else
;;       (let ((saved-vars (caar env))
;;             (saved-vals (cadar env))
;;             (saved-env (cadr env)))
;;         (cond
;;           ((member? s saved-vars) #t)
;;           (else (has-binding*? saved-env s))))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;run;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;init-env : () -> Env
(define init-env
  (lambda ()
    (extend-env
     (list 'i) (list (num-val 1))
     (extend-env
      (list 'v) (list (num-val 5))
      (extend-env
       (list 'x) (list (num-val 10))
       (empty-env))))))

;;run : String -> ExpVal
(define run
  (lambda (string)
    (value-of-program (scan&parse string))))
;;value-of-program : Program -> ExpVal
(define value-of-program
  (lambda (pgm)
    (initialize-store!)
    (cases program pgm
      (num-program (exp)
        (value-of exp (init-env) (get-store)))
      (bool-program (exp)
        (value-of-bool-exp exp (init-env) (get-store))))))
;;;;;;;;;;;;;;;;;;;;;;value-of-bool-exp : Exp × Env -> ExpVal;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define value-of-bool-exp
  (lambda (exp env store)
    (cases Bool-exp exp
      (zero?-exp (exp)
       (cases answer (value-of exp env store)
         (an-answer (val new-store)
           (if (zero? (expval->num val))
             (an-answer (bool-val #t) new-store)
             (an-answer (bool-val #f) new-store)))))
       (equal?-exp (exp1 exp2)
         (cases answer (value-of exp1 env store)
           (an-answer (val1 new-store1)
             (cases answer (value-of exp2 env new-store1)
               (an-answer (val2 new-store2)
                 (let ((num1 (expval->num val1))
                       (num2 (expval->num val2)))
                   (an-answer (bool-val (eq? num1 num2)) new-store2)))))))
       (greater?-exp (exp1 exp2)
         (cases answer (value-of exp1 env store)
           (an-answer (val1 new-store1)
             (cases answer (value-of exp2 env new-store1)
               (an-answer (val2 new-store2)
                 (let ((num1 (expval->num val1))
                       (num2 (expval->num val2)))
                   (an-answer (bool-val (> num1 num2)) new-store2)))))))
       (less?-exp (exp1 exp2)
         (cases answer (value-of exp1 env store)
           (an-answer (val1 new-store1)
             (cases answer (value-of exp2 env new-store1)
               (an-answer (val2 new-store2)
                 (let ((num1 (expval->num val1))
                       (num2 (expval->num val2)))
                   (an-answer (bool-val (< num1 num2)) new-store2))))))))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;value-of implementation;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;helper func;;;;;;;;;;;;;;;
(define report-unpack-args-mismatch
  (lambda ()
    (eopl:error 'unpack-exp "the number of vars is not equal to the length of lst")))
;; applicative-order Y combinator
(define  Y
  (lambda (le)
    ((lambda (f) (f f))
     (lambda (f)
       (le (lambda (x y z u) ((f f) x y z u)))))))
;; findIndex: ({Exp}*) × Env -> Int
(define findIndex
  (lambda (loexp env store)
    ((Y (lambda (index)
         (lambda (loexp env store n)
           (if (null? loexp)
             (report-cond-fail-error)
             (cases answer (value-of-bool-exp (car loexp) env store)
               (an-answer (val new-store)
                 (if (expval->bool val)
                   (list n new-store)
                   (index (cdr loexp) env new-store (+ n 1))))))))) loexp env store 1)))

(define report-cond-fail-error
  (lambda ()
    (eopl:error 'findIndex "no condition succeed")))
;; maplist: ({Exp}*) × Env -> list
(define maplist
  (lambda (loexp env)
    (cond
      ((null? loexp) '())
      (else
       (let ((val (expval->any (value-of (car loexp) env))))
         (cons val (maplist (cdr loexp) env)))))))
;; addition: ({Exp}*) × Ent -> num
(define addition
  (lambda (loexp env)
    (cond
      ((null? loexp) 0)
      (else
       (let ((num (expval->num (value-of (car loexp) env))))
         (+ num (addition (cdr loexp) env)))))))
;; multiply: ({Exp}*) × Env -> num
(define multiply
  (lambda (loexp env)
    (cond
      ((null? loexp) 1)
      (else
       (let ((num (expval->num (value-of (car loexp) env))))
         (* num (multiply (cdr loexp) env)))))))
;;curry2 : Func -> Func
(define curry3
  (lambda (f)
    (lambda (arg2 arg3)
      (lambda (arg1)
        (f arg1 arg2 arg3)))))
;;value : ({Symbol}*) × ({Exp}*) × Env -> ({Ans}*)
(define value
  (lambda (loexp env store)
    (cond
      ((null? loexp) '())
      (else
       (cases answer (value-of (car loexp) env store)
         (an-answer (val new-store)
           (cons (an-answer val new-store) (value (cdr loexp) env new-store))))))))  
;;value* : ({Symbol}*) × ({Exp}*) × Env -> ({Ans}*)
(define value*
  (lambda (lovar loexp env store)
    (cond
      ((and (null? lovar) (null? loexp)) '())
      (else
       (cases answer (value-of (car loexp) env store)
         (an-answer (val new-store)
           (cons (an-answer val new-store) (value* (cdr lovar) (cdr loexp) (extend-env (car lovar) val env) new-store))))))))
;;getValFromAns : Answer ->  Expval
(define getValFromAns
  (lambda (ans)
    (cases answer ans
      (an-answer (val store)
        val))))
;;getStoreFromAns : Answer -> Store
(define getStoreFromAns
  (lambda (ans)
    (cases answer ans
      (an-answer (val store)
        store))))
;;takeLast : List -> last element of list
(define takeLast
  (lambda (lst)
    (list-ref lst (- (length lst) 1))))
;;reduce: pred × Num × lst -> Num
(define reduce
  (lambda (pred n lst)
    (cond
      ((null? lst) n)
      (else
       (reduce pred (pred n (car lst)) (cdr lst))))))
;;;;;;;;;;;;;;;;;value-of : Exp × Env -> ExpVal;;;;;;;;;;;;;;;;;
;;value-of : Exp × Env -> ExpVal
(define value-of
  (lambda (exp env store)
    (cases expression exp
      (const-exp (num) (an-answer (num-val num) store))
      (var-exp (var) (an-answer (apply-env env var) store))
      (diff-exp (exp1 exp2)
        (cases answer (value-of exp1 env store)
          (an-answer (val1 new-store1)
            (cases answer (value-of exp2 env new-store1)
              (an-answer (val2 new-store2)
                (let ((num1 (expval->num val1))
                      (num2 (expval->num val2)))
                  (an-answer (num-val (- num1 num2)) new-store2)))))))
      (if-exp (exp1 exp2 exp3)
        (cases answer (value-of-bool-exp exp1 env store)
          (an-answer (val new-store)
            (if (expval->bool val)
              (value-of exp2 env new-store) 
              (value-of exp3 env new-store)))))
      (let-exp (lovar loexp body)
        (let ((loans (value loexp env store)))
          (let ((loval (map getValFromAns loans))
                (latest-store (getStoreFromAns (takeLast loans))))
            (value-of body (extend-env lovar loval env) latest-store))))
      (let*-exp (lovar loexp body)
        (let ((loans (value* lovar loexp env store)))
          (let ((loval (map getValFromAns loans))
                (latest-store (getStoreFromAns (takeLast loans))))
            (value-of body (extend-env lovar loval env) latest-store))))
      (minus-exp (exp)
        (cases answer (value-of exp env store)
          (an-answer (val new-store)
            (an-answer (num-val (- 0 (expval->num val))) new-store))))
      (add-exp (loexp)
        (let ((loans (value loexp env store)))
          (let ((loval (map getValFromAns loans))
                (latest-store (getStoreFromAns (takeLast loans))))
            (let ((lonum (map expval->num loval)))
              (an-answer (num-val (reduce + 0 lonum)) latest-store)))))
      (mul-exp (loexp)
        (let ((loans (value loexp env store)))
          (let ((loval (map getValFromAns loans))
                (latest-store (getStoreFromAns (takeLast loans))))
            (let ((lonum (map expval->num loval)))
              (an-answer (num-val (reduce * 1 lonum)) latest-store)))))
      (intq-exp (num exp)
        (cases answer (value-of exp env store)
          (an-answer (val new-store)
            (an-answer (num-val (* num (expval->num val))) new-store))))
      (emptylist-exp () (list-val '()))
      (cons-exp (exp1 exp2)
        (cases answer (value-of exp1 env store)
          (an-answer (val1 new-store1)
            (cases answer (value-of exp2 env new-store1)
              (an-answer (val2 new-store2)
                (let ((v1 (expval->any val1))
                      (v2 (expval->list val2)))
                  (an-answer (list-val (cons v1 v2)) new-store2)))))))
      (car-exp (exp)
         (cases answer (value-of exp env store)
           (an-answer (val new-store)
             (cond
               ((number? val) (an-answer (num-val val) new-store)) ;;as num and ref are both number, so this expressed value will not right if val is ref.
               ;;((boolean? val) (an-answer (bool-val val) new-store)) bool is not a valid value for expression, it is only valid for bool-exp
               ((list? val) (an-answer (list-val val) new-store))
               (else (an-answer (proc-val val) new-store))))))
      (cdr-exp (exp)
        (cases answer (value-of exp env store)
          (an-answer (val new-store)
            (let ((list (cdr (expval->list val))))
              (an-answer (list-val list) new-store)))))
      (null?-exp (exp)
        (cases answer (value-of exp env store)
          (an-answer (val new-store)
            (an-answer (bool-val (null? (expval->list val))) new-store))))
      (list-exp (loexp)
        (let ((loans (value loexp env store)))
          (let ((loval (map getValFromAns loans))
                (latest-store (getStoreFromAns (takeLast loans))))
            (let ((loany (map expval->any loval)))
              (an-answer (list-val loany) latest-store)))))
      (cond-exp (loexp1 loexp2)
        (let ((result (findIndex loexp1 env store)))
          (let ((i (car result))
                (latest-store (cadr result)))
            (value-of (pick i loexp2) env latest-store))))
      (unpack-exp (lovar lst-exp exp)
        (cases answer (value-of lst-exp env store)
          (an-answer (val new-store)
            (if (not (eq? (length lovar) (length (expval->list val))))
              (report-unpack-args-mismatch)
              (value-of exp (extend-env lovar (map num-val (expval->list val)) env) new-store)))))
      ;;;;;lexical scoping;;;;;
      (proc-exp (lovar body)
        (an-answer (proc-val (procedure lovar body env)) store))
      (call-exp (rator lorand)
        (cases answer (value-of rator env store)
          (an-answer (val new-store)
            (let ((loans (value lorand env new-store)))
              (let ((loarg (map getValFromAns loans))
                    (latest-store (getStoreFromAns (takeLast loans))))
                (apply-procedure (expval->proc val) loarg latest-store))))))
      ;;;;;dynamic scoping;;;;;
      ;;(proc-exp (lovar body)
      ;;  (proc-val (procedure lovar body)))
      ;;(call-exp (rator lorand)
      ;;  (let ((proc (expval->proc (value-of rator env)))
      ;;        (loarg (map ((curry2 value-of) env) lorand)))
      ;;    (apply-procedure proc loarg env)))
      (letrec-exp (lop-name lob-vars lop-body letrec-body)
        (value-of letrec-body (extend-env-rec lop-name lob-vars lop-body env) store))
      (newref-exp (exp)
        (cases answer (value-of exp env store)
          (an-answer (val new-store)
            (an-answer (ref-val (newref val)) (get-store)))))
      (deref-exp (exp)
        (cases answer (value-of exp env store)
          (an-answer (val new-store)
            (let ((ref (expval->ref val)))
              (an-answer (deref ref) new-store)))))
      (setref-exp (exp1 exp2)
        (cases answer (value-of exp1 env store)
          (an-answer (val1 new-store1)
            (cases answer (value-of exp2 env new-store1)
              (an-answer (val2 new-store2)
                (let ((ref (expval->ref val1)))
                  (let ((oldval (deref ref)))
                    (begin
                      (setref! ref val2)
                      (an-answer oldval (get-store))))))))))
      (begin-exp (exp loexp)
        (cases answer (value-of exp env store)
          (an-answer (val new-store)
            (let ((loans (value loexp env new-store)))
              (let ((latest-val (getValFromAns (takeLast loans)))
                    (latest-store (getStoreFromAns (takeLast loans))))
                (an-answer latest-val latest-store)))))))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;datatype implementation;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;(define-datatype program program?
;;  (a-program
;;    (exp1 expression?)))
;;(define identifier?
;;  (lambda (s)
;;    (and (symbol? s) (not (eq? s 'lambda)))))
;;(define-datatype expression expression?
;;  (const-exp
;;    (num number?))
;;  (diff-exp
;;    (exp1 expression?)
;;    (exp2 expression?))
;;  (zero?-exp
;;    (exp1 expression?))
;;  (if-exp
;;    (exp1 expression?)
;;    (exp2 expression?)
;;    (exp3 expression?))
;;  (var-exp
;;    (var identifier?))
;;  (let-exp
;;    (var identifier?)
;;    (exp1 expression?)
;;    (body expression?))
;;  (minus-exp
;;   (exp expression?))
;;  (add-exp
;;   (loexp (list-of expression?)))
;;  (mul-exp
;;   (loexp (list-of expression?)))
;;  (intq-exp
;;   (num number?)
;;   (exp expression?)))
  
;;;;;;;;;;;;;;;;;;;;;;;procedure datatype;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;procedural representation;;;;;;;;;;
(define proc?
  (lambda (val)
    (procedure? val)))
(define procedure
  (lambda (lovar body env)
    (lambda (loval store)
      (value-of body (extend-env lovar loval env) store))))
(define apply-procedure
  (lambda (proc1 loval store)
    (proc1 loval store)))
;;;;;;;;abstract-syntax representation;;;;;;;;;;;;;
;;(define-datatype proc proc?
;;  (procedure
;;    (lovar (list-of identifier?))
;;    (body expression?)
;;    (saved-env environment?)))
;;(define apply-procedure
;;  (lambda (proc1 loval)
;;    (cases proc proc1
;;      (procedure (lovar body saved-env)
;;        (value-of body (extend-env lovar loval saved-env))))))
;;;;;;;;;;;;;;;;;;;;abstract-syntax representation(dynamic binding);;;;;;;;;;;;;;;;;;;;;;;;;;;be sure to modify the value-of as well
;;(define-datatype proc proc?
;;  (procedure
;;    (lovar (list-of identifier?))
;;    (body expression?)))
;;(define apply-procedure
;;  (lambda (proc1 loval env)
;;    (cases proc proc1
;;      (procedure (lovar body)
;;        (value-of body (extend-env lovar loval env))))))
;;;;;;;;;;;;;;;;;;;;;;;;;;;answer datatype;;;;;;;;;;;;;;;;;;;;;;;
(define-datatype answer answer?
  (an-answer
    (var expval?)
    (store store?)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;expval datatype;;;;;;;;;;;;;;;;;;;;;;;
(define-datatype expval expval?
  (num-val
    (num number?))
  (bool-val
    (bool boolean?))
  (list-val
    (list list?))
  (proc-val
    (proc proc?))
  (ref-val
    (ref reference?)))
;;expval->ref : Expval-> ref
(define expval->ref
  (lambda (val)
    (cases expval val
      (ref-val (ref) ref)
      (else (report-expval-extractor-error 'ref val)))))
;;expval->proc : Expval-> proc
(define expval->proc
  (lambda (val)
    (cases expval val
      (proc-val (proc) proc)
      (else (report-expval-extractor-error 'proc val)))))
;;expval->num : ExpVal -> Int
(define expval->num
  (lambda (val)
    (cases expval val
      (num-val (num) num)
      (else (report-expval-extractor-error 'num val)))))
;;expval->bool : ExpVal -> Bool
(define expval->bool
  (lambda (val)
    (cases expval val
      (bool-val (bool) bool)
      (else (report-expval-extractor-error 'bool val)))))
;;expval->list : ExpVal -> List
(define expval->list
  (lambda (val)
    (cases expval val
      (list-val (list) list)
      (else (report-expval-extractor-error 'list val)))))
;;expval->any : ExpVal -> List|Int|Bool|Proc
(define expval->any
  (lambda (val)
    (cases expval val
      (list-val (list) list)
      (num-val (num) num)
      (bool-val (bool) bool)
      (proc-val (proc) proc)
      (ref-val (ref) ref)
      (else (report-expval-extractor-error 'any val)))))
(define report-expval-extractor-error
  (lambda (type val)
    (eopl:error 'expval->num "expect ~s, but reveived ~s" type val)))


;;;;;;;;;;;;;;;;;;;;;;;;;exer3.26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; unique : lst -> lst of unique elements
(define unique
  (lambda (lst)
    (cond
      ((null? lst) '())
      (else
       (cond
         ((member? (car lst) (cdr lst)) (unique (cdr lst)))
         (else (cons (car lst) (unique (cdr lst)))))))))
;; removelist : Lst × Lst -> Lst
(define removelist
  (lambda (lst1 lst2)
    (cond
      ((null? lst1) lst2)
      (else
       (removelist (cdr lst1) (remove (car lst1) lst2))))))
;; var-in-exp : exp -> lst of var
)

;;add
;;"let add = proc (x) proc (y) +(x,y) in ((add 1) 3)"



