(module CP-Interpreter
  (lib "eopl.ss" "eopl")
;;remove-first : Sym × Listof(Sym) -> Listof(Sym)
  (define remove-first
    (lambda (s los)
      (if (null? los)
        '()
        (if (eqv? (car los) s)
          (cdr los)
          (cons (car los) (remove-first s (cdr los)))))))
;;occurs-free? : Sym × LcExp -> Bool
  (define occurs-free?
    (lambda (var exp)
      (cond
        ((symbol? exp) (eqv? var exp))
        ((eqv? (car exp) 'lambda)
         (and
           (not (eqv? var (car (cadr exp))))
           (occurs-free? var (caddr exp))))
        (else
         (or
           (occurs-free? var (car exp))
           (occurs-free? var (cadr exp)))))))
;;list-sum : Listof(Int) -> Int
  (define list-sum
    (lambda (loi)
      (if (null? loi)
        0
        (+ (car loi)
           (list-sum (cdr loi))))))
;;subst : Sym × Sym × S-list -> S-list
  (define subst
    (lambda (new old slist)
      (if (null? slist)
        '()
        (cons
          (subst-in-s-exp new old (car slist))
          (subst new old (cdr slist))))))
;;subst-in-s-exp : Sym × Sym × S-exp -> S-exp
  (define subst-in-s-exp
    (lambda (new old sexp)
      (if (symbol? sexp)
        (if (eqv? sexp old) new sexp)
        (subst new old sexp))))
)